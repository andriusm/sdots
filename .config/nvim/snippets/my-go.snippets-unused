snippet rfile
raw, err := ioutil.ReadFile("${1:file.txt}")
if err != nil {
	panic(err)
}
data := string(raw)
fmt.Println(data)
endsnippet

snippet fscan
file, err := os.Open("${1:file.txt}")
if err != nil {
	panic(err)
}
defer file.Close()

scanner := bufio.NewScanner(file)
scanner.Split(bufio.ScanLines)

for scanner.Scan() {
	line := scanner.Text()
	fmt.Println(line)
	$0
}
endsnippet

snippet authreq
client := &http.Client{}

req, err := http.NewRequest("${1:GET}", "${2:http://www.google.com}", nil)
if err != nil {
	panic(err)
}

req.SetBasicAuth("${3:user}", "${4:pwd}")
resp, err := client.Do(req)
if err != nil {
	panic(err)
}
endsnippet

snippet rdall
data, err := ioutil.ReadAll(${1:reader})
if err != nil {
	panic(err)
}
endsnippet

snippet b64dec
result, err := base64.StdEncoding.DecodeString("${1:YRWcnuROgmg=}")
if err != nil {
	panic(err)
}
endsnippet

snippet b64enc
result := base64.StdEncoding.EncodeToString([]byte("${1:test}"))
endsnippet

snippet htoken
tokenizer := html.NewTokenizer(resp.Body)
for {
	tt := tokenizer.Next()
	switch tt {
	case html.ErrorToken:
		return
	case html.StartTagToken:
		token := tokenizer.Token()
		if token.Data == "h1" {
			tokenizer.Next()
			token = tokenizer.Token()
			fmt.Printf("token = %#v\n", token.Data)
		}
	}
}
endsnippet

snippet dbopen
connectionUrl := fmt.Sprintf("%s:%s@tcp(%s:%d)/%s",
	db.username,
	db.password,
	constants.TUNNEL_LOCAL_HOST,
	constants.TUNNEL_LOCAL_PORT,
	db.name)
conn, err := sql.Open("mysql", connectionUrl)

if err != nil {
	log.Fatalf("Could not connect to db %s:%s - %s\n", db.host, db.port, err)
}
endsnippet
